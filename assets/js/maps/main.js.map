{"version":3,"names":[],"mappings":"","sources":["main.js"],"sourcesContent":["jQuery(document).ready(function( $ ) {\n\n    $('body').waypoint({\n        offset: -200,\n        handler: function(direction) {\n            const banner = $('#pre-order-banner');\n            if(direction === 'down'){\n                banner.addClass(\"sticky\");\n            }\n            else{\n                banner.removeClass(\"sticky\");\n            }\n        }\n    });\n\n    $('.usecase-arrow.right').click(function(a, b) {\n        const modalId = parseInt($(this).find('a')[0].dataset.modalId);\n        $('#modal-' + (modalId +1)).modal('show');\n        $('.modal-backdrop').first().hide();\n\n        $('#modal-' + (modalId)).delay(200).fadeOut(450);\n        setTimeout(function() {\n            $('#modal-' + (modalId)).modal('hide');\n        }, 650);\n    });\n\n    $('.usecase-arrow.left').click(function(a, b) {\n        const modalId = parseInt($(this).find('a')[0].dataset.modalId);\n        // when we move to the previous modal, that modal is lower in the html node list,\n        // therefore is 'behind' the current one z-index wise.\n        // therefore we have to move the next slide to a higher z-index to make it the top most layer.\n        // At the end this is pub back to how it should be. \n        const currentZIndex = parseInt( $('#modal-' + (modalId)).css( \"z-index\" ), 10 );\n        \n        $('#modal-' + (modalId -1)).modal('show');\n        $('#modal-' + (modalId -1)).css('z-index', currentZIndex +1);\n        \n        $('.modal-backdrop').first().hide();\n\n        $('#modal-' + (modalId)).delay(200).fadeOut(450);\n        setTimeout(function() {\n            $('#modal-' + (modalId)).modal('hide');\n            $('#modal-' + (modalId -1)).css('z-index', currentZIndex);\n        }, 650);\n\n    });\n    \n\n\n});\n\n// From https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys\nif (!Object.keys) {\n    Object.keys = (function () {\n        'use strict';\n        var hasOwnProperty = Object.prototype.hasOwnProperty,\n            hasDontEnumBug = !({ toString: null }).propertyIsEnumerable('toString'),\n            dontEnums = [\n                'toString',\n                'toLocaleString',\n                'valueOf',\n                'hasOwnProperty',\n                'isPrototypeOf',\n                'propertyIsEnumerable',\n                'constructor'\n            ],\n            dontEnumsLength = dontEnums.length;\n\n        return function (obj) {\n            if (typeof obj !== 'function' && (typeof obj !== 'object' || obj === null)) {\n                throw new TypeError('Object.keys called on non-object');\n            }\n\n            var result = [], prop, i;\n\n            for (prop in obj) {\n                if (hasOwnProperty.call(obj, prop)) {\n                    result.push(prop);\n                }\n            }\n\n            if (hasDontEnumBug) {\n                for (i = 0; i < dontEnumsLength; i++) {\n                    if (hasOwnProperty.call(obj, dontEnums[i])) {\n                        result.push(dontEnums[i]);\n                    }\n                }\n            }\n            return result;\n        };\n    }());\n}\n\n/**\n * jquery-select-hierarchy\n *\n * Turns a single select containing breadcrumb trails into multiple dynamic selects to allow easy drill-down\n *\n * Author: Andrew Ingram (andy@andrewingram.net)\n */\n(function ($) {\n    $.fn.selectHierarchy = function (options) {\n        var defaults = {\n            separator: ' > ',\n            hideOriginal: true,\n            placeholder: '------'\n        };\n        var options = $.extend(defaults, options);\n        var obj = $(this);\n        var max_depth = 1;\n\n        var choices = obj.find('option').map(function () {\n            var val = $(this).val();\n\n            if (val) {\n                var txt = $(this).text();\n                var segments = txt.split(options.separator);\n                var depth = segments.length;\n\n                if (depth > max_depth) {\n                    max_depth = depth;\n                }\n\n                var result = {\n                    label: txt,\n                    short_label: segments[depth - 1],\n                    value: val,\n                    depth: depth,\n                    children: []\n                };\n\n                return result;\n            }\n        });\n\n        var roots = [];\n\n        // Build up child values\n        for (var depth = 1; depth <= max_depth; depth++) {\n            $.each(choices, function () {\n                var parent = this;\n\n                if (parent.depth == depth) {\n                    if (depth === 1) {\n                        roots.push(this);\n                    }\n\n                    $.each(choices, function () {\n                        var child = this;\n                        if (child.depth == depth + 1 && child.label.match(\"^\" + parent.label) == parent.label) {\n                            parent.children.push(child);\n                        }\n                    });\n                }\n            });\n        }\n\n        if (options.hideOriginal) {\n            obj.hide();\n        }\n        obj.wrap('<span class=\"drilldown-wrapper\" />');\n        obj.after('<select class=\"drilldown drilldown-1\"><option disabled selected value=\"\">' + options.placeholder + '</option></select>');\n        var root_select = obj.next();\n\n        root_select.data('depth', 1);\n\n        $.each(roots, function () {\n            var opt = $('<option>');\n            opt.val(this.value);\n            opt.text(this.short_label);\n            opt.data('node', this);\n            root_select.append(opt);\n        });\n\n        var change_handler = function () {\n            var this_select = $(this);\n            var opt = this_select.find('option:selected');\n            var node = opt.data('node');\n\n            if (this_select.val()) {\n                obj.val(this_select.val());\n            } else if (this_select.data('depth') > 1) {\n                obj.val(this_select.prev().val());\n            } else {\n                obj.val('');\n            }\n\n            this_select.nextAll('select').remove();\n\n            // Check to see if there's any children, if there are we build another select box;\n            if (node && node.children.length > 0) {\n                this_select.after('<select class=\"drilldown\"><option selected disabled value=\"\">' + options.placeholder + '</option></select>');\n\n\n                var next_select = this_select.next();\n                next_select.addClass('drilldown-' + (node.depth + 1));\n                next_select.data('depth', node.depth + 1);\n\n                $.each(node.children, function () {\n                    var opt = $('<option>');\n                    opt.val(this.value);\n                    opt.text(this.short_label);\n                    opt.data('node', this);\n                    next_select.append(opt);\n                });\n                next_select.change(change_handler);\n            }\n        }\n        root_select.change(change_handler);\n\n        // After setting up the behavior, set the drilldown select lists to the correct values for\n        // forms with a default value.\n\n        // Build an object of the choices keyed by short_label.\n        var choices_by_short_label = {};\n        $.each(choices, function () {\n            choices_by_short_label[(this).short_label] = (this);\n        });\n\n        // Break selected label into segments/short_labels\n        var selected_label = obj.find(' option:selected').text();\n        var segments = selected_label.split(options.separator);\n\n        // Loop over the segments of the selected value and select the appropriate values on the\n        // drilldown select lists.\n        var counter = 1;\n\n// DOM: Disabled the next lines to not preselect anything\n        // $.each(segments, function () {\n        //     if (choices_by_short_label[(this)]) {\n        //         $('select.drilldown-' + counter, obj.parent()).val(choices_by_short_label[(this)].value);\n        //         $('select.drilldown-' + counter, obj.parent()).change();\n        //     }\n        //     counter++;\n        // });\n    };\n})(jQuery);"],"file":"../main.js"}