{"version":3,"names":[],"mappings":"","sources":["buy-trident.js"],"sourcesContent":["'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); }); }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n//var PRODUCT = '57e9bd02726ecc1100f4204a'; // testproduct\nconst PRODUCT = '5637ca44df92ea03009633b3'; //trident\n\nfunction objectifyForm(formArray) {\n    //serialize data function\n    var returnArray = {};\n    for (var i = 0; i < formArray.length; i++) {\n        returnArray[formArray[i]['name']] = formArray[i]['value'];\n    }\n    return returnArray;\n}\n\nvar BuyScreen = function () {\n    function BuyScreen() {\n        _classCallCheck(this, BuyScreen);\n    }\n\n    _createClass(BuyScreen, [{\n        key: 'getData',\n        value: function getData(formData, variant) {\n            var address = {\n                \"first_name\": formData.firstName,\n                \"last_name\": formData.lastName,\n                \"company\": null,\n                \"line1\": formData.address1,\n                \"line2\": formData.address2,\n                \"city\": formData.city,\n                \"state\": formData.country === 'US' ? formData.usState : formData.state,\n                \"zip\": formData.zip,\n                \"country\": formData.country.toLowerCase(),\n                \"phone\": formData.phone\n            };\n\n            var data = {\n                \"user_id\": '5637c8d966e9ec03008989ef',\n                \"buyer\": {\n                    \"email\": formData.email,\n                    \"first_name\": formData.firstName,\n                    \"last_name\": formData.lastName,\n                    \"phone\": formData.phone,\n                    \"notes\": formData.notes\n                },\n                \"shipping_address\": address,\n                \"billing_address\": Object.assign({}, address, { zip: formData.billingZip }),\n                \"line_items\": [{\n                    // \"product_id\": \"5637ca44df92ea03009633b3\",\n                    \"product_id\": PRODUCT,\n                    \"variant_id\": variant,\n                    \"quantity\": parseInt(formData.quantity)\n                }],\n                \"payment_source\": {\n                    \"card\": {\n                        \"name\": formData.firstName + ' ' + formData.lastName,\n                        \"number\": formData.ccNumber,\n                        \"exp_month\": formData.expDate.split('/')[0],\n                        \"exp_year\": formData.expDate.split('/')[1],\n                        \"cvc\": formData.cvc\n                    }\n                },\n                \"discount_codes\": []\n            };\n            return data;\n        }\n    }, {\n        key: 'getVariant',\n        value: function getVariant(formData, variants) {\n\n            var selectedVariants = [];\n            for (var item in formData) {\n                if (item.startsWith('option_')) {\n                    selectedVariants.push(formData[item]);\n                }\n            }\n            selectedVariants = selectedVariants.sort();\n\n            var _iteratorNormalCompletion = true;\n            var _didIteratorError = false;\n            var _iteratorError = undefined;\n\n            try {\n                for (var _iterator = variants[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                    var v = _step.value;\n\n                    var ids = v.options.ids.sort();\n                    if (ids.join() === selectedVariants.join()) {\n                        return v.id;\n                    }\n                }\n            } catch (err) {\n                _didIteratorError = true;\n                _iteratorError = err;\n            } finally {\n                try {\n                    if (!_iteratorNormalCompletion && _iterator.return) {\n                        _iterator.return();\n                    }\n                } finally {\n                    if (_didIteratorError) {\n                        throw _iteratorError;\n                    }\n                }\n            }\n\n            return undefined;\n        }\n    }, {\n        key: 'calculateShipping',\n        value: function calculateShipping(form, variants) {\n            var formData = objectifyForm(form.serializeArray());\n            var data = this.getData(formData, this.getVariant(form, variants));\n            return this._calculateShipping(data);\n        }\n    }, {\n        key: '_calculateShipping',\n        value: function () {\n            var _ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee(data) {\n                var result;\n                return regeneratorRuntime.wrap(function _callee$(_context) {\n                    while (1) {\n                        switch (_context.prev = _context.next) {\n                            case 0:\n                                form.find('.loading').show();\n                                _context.next = 3;\n                                return $.ajax({\n                                    \"async\": true,\n                                    \"crossDomain\": true,\n                                    \"url\": \"https://wt-f938a32f745f3589d64a35c208dd4c79-0.run.webtask.io/celry-access/calculate-shipping\",\n                                    \"method\": \"POST\",\n                                    \"headers\": { \"content-type\": \"application/json\" },\n                                    \"processData\": false,\n                                    \"data\": JSON.stringify(data)\n                                });\n\n                            case 3:\n                                result = _context.sent;\n\n                                form.find('#shipping').val('$' + (result.shipping / 100).toFixed(2));\n                                form.find('#subtotal').val('$' + (result.subtotal / 100).toFixed(2));\n                                form.find('#tax').val('$' + (result.taxes / 100).toFixed(2));\n                                form.find('#total').val('$' + (result.total / 100).toFixed(2));\n                                form.find('.loading').hide();\n\n                            case 9:\n                            case 'end':\n                                return _context.stop();\n                        }\n                    }\n                }, _callee, this);\n            }));\n\n            function _calculateShipping(_x) {\n                return _ref.apply(this, arguments);\n            }\n\n            return _calculateShipping;\n        }()\n    }, {\n        key: 'setupForm',\n        value: function () {\n            var _ref2 = _asyncToGenerator(regeneratorRuntime.mark(function _callee2(orderForm) {\n                var _this = this;\n\n                var result, optionsHtml, formData, data, variants;\n                return regeneratorRuntime.wrap(function _callee2$(_context2) {\n                    while (1) {\n                        switch (_context2.prev = _context2.next) {\n                            case 0:\n                                _context2.next = 2;\n                                return $.ajax({\n                                    url: 'https://wt-f938a32f745f3589d64a35c208dd4c79-0.run.webtask.io/celry-access/products/' + PRODUCT\n                                });\n\n                            case 2:\n                                result = _context2.sent;\n\n                                $('#description').html(result.data.description);\n\n                                optionsHtml = result.data.options.map(function (o) {\n                                    return '<div class=\"form-group\">' + ('<label for=\"' + o.id + '\" class=\"col-2 col-form-label\">' + o.name + ':</label>') + ('<div class=\"select-wrap\"><select class=\"form-control form-control-danger col-6\" id=\"option_' + o.id + '\" name=\"option_' + o.id + '\" required>') + ('<option selected value=\"\" disabled>Select ' + o.name + '</option>') + o.values.map(function (v) {\n                                        return '<option value=\"' + v.id + '\">' + v.name + '</option>';\n                                    }).join('') + '</select></div>' + '</div>';\n                                }).join('');\n                                formData = objectifyForm(orderForm.serializeArray());\n                                data = this.getData(formData, result.data.variants[result.data.variants.length - 1].id);\n\n                                this._calculateShipping(data);\n\n                                orderForm.find('#options').append(optionsHtml);\n\n                                orderForm.find('#country option[value=\"US\"]').attr('selected', 'true');\n                                orderForm.find('#country').change(function (ev) {\n                                    if (ev.currentTarget.options[ev.target.selectedIndex].value === 'US') {\n                                        orderForm.find('#usState').removeClass('hidden-xs-up').attr('required', false);\n                                        orderForm.find('#state').addClass('hidden-xs-up').attr('required', true);\n                                    } else {\n                                        orderForm.find('#state').removeClass('hidden-xs-up').attr('required', false);\n                                        orderForm.find('#usState').addClass('hidden-xs-up').attr('required', false);\n                                    }\n                                    orderForm.validator('update');\n                                    _this.calculateShipping(orderForm, result.data.variants);\n                                });\n\n                                orderForm.find('#options select').change(function (ev) {\n                                    _this.calculateShipping(orderForm, result.data.variants);\n                                });\n\n                                orderForm.find('#quantity').change(function (ev) {\n                                    _this.calculateShipping(orderForm, result.data.variants);\n                                });\n\n                                orderForm.find('#ccNumber').keypress(function (event) {\n                                    var char = String.fromCharCode(event.which);\n                                    if (!char.match(/[0-9- ]/)) event.preventDefault();\n                                });\n\n                                orderForm.find('#expDate').keypress(function (event) {\n                                    var char = String.fromCharCode(event.which);\n                                    if (!char.match(/[0-9/]/)) event.preventDefault();\n                                });\n\n                                orderForm.on('validated.bs.validator', function (ev) {\n                                    if (ev.relatedTarget.id === 'expDate') {\n                                        if (!ev.relatedTarget.checkValidity()) {\n                                            $(ev.relatedTarget).parent().addClass('has-danger');\n                                            return false;\n                                        } else {\n                                            $(ev.relatedTarget).parent().removeClass('has-danger');\n                                        }\n                                    }\n                                }).on('invalid.bs.validator', function (ev) {\n                                    console.log(ev.relatedTarget.id + ' ' + ev.detail);\n\n                                    // if (ev.relatedTarget.id === 'expDate' && ev.type === 'invalid') {\n                                    //     ev.relatedTarget.parent().addClass('has-danger')\n                                    // }\n                                });\n\n                                variants = result.data.variants;\n                                return _context2.abrupt('return', variants);\n\n                            case 18:\n                            case 'end':\n                                return _context2.stop();\n                        }\n                    }\n                }, _callee2, this);\n            }));\n\n            function setupForm(_x2) {\n                return _ref2.apply(this, arguments);\n            }\n\n            return setupForm;\n        }()\n    }, {\n        key: 'submit',\n        value: function () {\n            var _ref3 = _asyncToGenerator(regeneratorRuntime.mark(function _callee3() {\n                var orderForm, variants, formData, data, result, order, total, currency, line_items, path;\n                return regeneratorRuntime.wrap(function _callee3$(_context3) {\n                    while (1) {\n                        switch (_context3.prev = _context3.next) {\n                            case 0:\n                                orderForm = this.orderForm, variants = this.variants;\n\n                                orderForm.find('button[type=\"submit\"]').attr('disabled', true);\n                                orderForm.find('.submitting').show();\n\n                                formData = objectifyForm(orderForm.serializeArray());\n                                data = this.getData(formData, this.getVariant(formData, this.getVariant(form, variants)));\n                                _context3.prev = 5;\n                                _context3.next = 8;\n                                return $.ajax({\n                                    \"async\": true,\n                                    \"crossDomain\": true,\n                                    \"url\": \"https://api.trycelery.com/v2/orders/checkout\",\n                                    \"method\": \"POST\",\n                                    \"headers\": { \"content-type\": \"application/json\" },\n                                    \"processData\": false,\n                                    \"data\": JSON.stringify(data)\n                                });\n\n                            case 8:\n                                result = _context3.sent;\n                                order = result.data;\n                                total = order.total / 100;\n                                currency = order.currency;\n                                line_items = order.line_items.map(function (item) {\n                                    return item.celery_sku;\n                                }).join(',');\n                                path = \"?number=\" + order.number + \"&amount=\" + total + \"&currency=\" + currency + \"&line_items=\" + line_items;\n\n\n                                window.location.replace(window.location.href + '../confirmation/' + path);\n                                _context3.next = 23;\n                                break;\n\n                            case 17:\n                                _context3.prev = 17;\n                                _context3.t0 = _context3['catch'](5);\n\n                                this.orderForm.find('.alert .title').text(_context3.t0.statusText);\n                                this.orderForm.find('.alert .description').text(_context3.t0.responseJSON.data);\n                                this.orderForm.find('.alert').show();\n                                this.orderForm.find('.submitting').hide();\n\n                            case 23:\n                            case 'end':\n                                return _context3.stop();\n                        }\n                    }\n                }, _callee3, this, [[5, 17]]);\n            }));\n\n            function submit() {\n                return _ref3.apply(this, arguments);\n            }\n\n            return submit;\n        }()\n    }, {\n        key: 'runSetupForm',\n        value: function () {\n            var _ref4 = _asyncToGenerator(regeneratorRuntime.mark(function _callee4() {\n                return regeneratorRuntime.wrap(function _callee4$(_context4) {\n                    while (1) {\n                        switch (_context4.prev = _context4.next) {\n                            case 0:\n                                _context4.next = 2;\n                                return this.setupForm(this.orderForm);\n\n                            case 2:\n                                this.variants = _context4.sent;\n\n                                this.orderForm.validator('update');\n\n                            case 4:\n                            case 'end':\n                                return _context4.stop();\n                        }\n                    }\n                }, _callee4, this);\n            }));\n\n            function runSetupForm() {\n                return _ref4.apply(this, arguments);\n            }\n\n            return runSetupForm;\n        }()\n    }, {\n        key: 'init',\n        value: function init() {\n            var _this2 = this;\n\n            this.orderForm = $('form#orderForm');\n            var self = this;\n            // this.orderForm.validator().on('submit', (ev) => {\n            this.orderForm.validator().find('button.submit').click(function (ev) {\n                ev.preventDefault();\n\n                if (self.variants === undefined) {\n                    return;\n                }\n\n                _this2.orderForm.validator('validate');\n\n                if (!self.orderForm[0].checkValidity()) {\n                    return;\n                } else {\n                    _this2.submit();\n                }\n            });\n\n            $('#orderFormContainer').removeClass('invisible');\n            $('#loader-wrapper').addClass('loaded');\n\n            this.runSetupForm();\n        }\n    }]);\n\n    return BuyScreen;\n}();\n\n(function () {\n    var screen = new BuyScreen();\n    screen.init();\n})();\n//# sourceMappingURL=buy-trident.js.map\n"],"file":"../buy-trident.js"}